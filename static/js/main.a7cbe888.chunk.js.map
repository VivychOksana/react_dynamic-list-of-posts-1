{"version":3,"sources":["Components/PostsFromServer.js","Components/UsersFromServer.js","Components/CommentsFromServer.js","Components/User.js","Components/Comment.js","Components/CommentList.js","Components/Post.js","Components/PostList.js","App.js","Components/Function.js","index.js"],"names":["postsFromServer","response","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","usersFromServer","commentsFromServer","User","_ref","name","email","address","react_default","createElement","className","concat","city","Comment","body","CommentList","list","map","item","Components_Comment","Object","assign","key","id","Post","bolderText","title","user","comments","boldText","text","split","RegExp","part","i","react","toLowerCase","Fragment","Components_User","Components_CommentList","PostList","posts","result","post","Components_Post","App","data","_useState","useState","_useState2","slicedToArray","typicalPosts","setTypicalPosts","_useState3","_useState4","setPosts","_useState5","_useState6","isLoad","setLoad","_useState7","_useState8","isLoading","setLoading","_useState9","_useState10","searchValue","setSearchValue","searchWithDelayTime","f","delay","timer","clearTimeout","_len","arguments","length","args","Array","_key","setTimeout","apply","delayTime","value","filter","_ref3","includes","type","placeholder","onChange","_ref4","target","slice","Components_PostList","searchResultValue","onClick","_ref2","postData","userData","commentData","Promise","all","objectSpread2","find","userId","comment","postId","t0","disabled","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.a7cbe888.chunk.js","sourcesContent":["const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\nexport const postsFromServer = async() => {\n  const response = await fetch(POSTS_URL);\n\n  return response.json();\n};\n","const USERS_URL = 'https://jsonplaceholder.typicode.com/users';\n\nexport const usersFromServer = async() => {\n  const response = await fetch(USERS_URL);\n\n  return response.json();\n};\n","const COMMENTS_URL = 'https://jsonplaceholder.typicode.com/comments';\n\nexport const commentsFromServer = async() => {\n  const response = await fetch(COMMENTS_URL);\n\n  return response.json();\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ name, email, address }) => (\n  <div className=\"author\">\n    <h4>{`Name: ${name}`}</h4>\n    <p>{`Email: ${email}`}</p>\n    <p>{`City: ${address.city}`}</p>\n  </div>\n);\n\nUser.propTypes = {\n  name: PropTypes.string,\n  email: PropTypes.string,\n  address: PropTypes.shape({\n    city: PropTypes.string,\n  }),\n}.isRequired;\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Comment = ({ name, email, body }) => (\n  <div>\n    <h3>{`Comment: ${name}`}</h3>\n    <p>{body}</p>\n    <p>{email}</p>\n  </div>\n);\n\nComment.propTypes = {\n  name: PropTypes.string,\n  email: PropTypes.string,\n  body: PropTypes.string,\n}.isRequired;\n\nexport default Comment;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from './Comment';\n\nconst CommentList = ({ list }) => (\n  <div className=\"comment__list\">\n    {list.map(\n      item => <Comment key={item.id} {...item} />\n    )}\n  </div>\n);\n\nCommentList.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.object\n  ),\n}.isRequired;\n\nexport default CommentList;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport User from './User';\nimport CommentList from './CommentList';\n\nconst Post = ({ bolderText, id, title, body, user, comments }) => {\n  const boldText = (text) => {\n    if (!bolderText) {\n      return text;\n    }\n\n    const article = text.split(new RegExp(`(${bolderText})`, 'gi'));\n\n    return article.map((part, i) => (\n      <Fragment key={`${part + i}`}>\n        {part.toLowerCase() === bolderText.toLowerCase()\n          ? <span>{part}</span>\n          : part}\n      </Fragment>\n    ));\n  };\n\n  return (\n    <section>\n      <>\n        <article>\n          <p className=\"post__id\">{`Post ${id}`}</p>\n          <h2>\n            {boldText(title)}\n          </h2>\n\n          <p>\n            {boldText(body)}\n          </p>\n        </article>\n\n        <User {...user} />\n      </>\n\n      <CommentList list={comments} />\n    </section>\n  );\n};\n\nPost.propTypes = {\n  bolderText: PropTypes.string,\n  id: PropTypes.number,\n  title: PropTypes.string,\n  body: PropTypes.string,\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.object,\n  }),\n  comments: PropTypes.arrayOf(\n    PropTypes.object\n  ),\n}.isRequired;\n\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Post from './Post';\n\nconst PostList = ({ posts, result }) => (\n  <div>\n    {posts.map(\n      post => (\n        <Post\n          bolderText={result}\n          key={post.id}\n          {...post}\n        />\n      )\n    )}\n  </div>\n);\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object),\n  result: PropTypes.string,\n}.isRequired;\n\nexport default PostList;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport { postsFromServer } from './Components/PostsFromServer';\nimport { usersFromServer } from './Components/UsersFromServer';\nimport { commentsFromServer } from './Components/CommentsFromServer';\nimport { delayTime } from './Components/Function';\nimport PostList from './Components/PostList';\n\nconst App = () => {\n  const [typicalPosts, setTypicalPosts] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [isLoad, setLoad] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n\n  let data;\n\n  const loadData = async() => {\n    setLoading(true);\n\n    try {\n      const [postData, userData, commentData] = await Promise.all([\n        postsFromServer(),\n        usersFromServer(),\n        commentsFromServer(),\n      ]);\n\n      data = postData.map(\n        post => ({\n          ...post,\n          user: userData.find(\n            user => post.userId === user.id\n          ),\n          comments: commentData.filter(\n            comment => post.id === comment.postId\n          ),\n        })\n      );\n\n      setTypicalPosts(data);\n      setPosts(data);\n      setLoading(false);\n      setLoad(true);\n    } catch (e) {\n      setLoading(false);\n    }\n  };\n\n  const searchWithDelayTime = delayTime(value => setPosts(\n    typicalPosts.filter(\n      ({ title, body }) => (title + body).toLowerCase().includes(value)\n    )\n  ), 500);\n\n  const searchPosts = ({ target }) => {\n    const value = target.value.toLowerCase().slice(0, 37);\n\n    setSearchValue(value);\n    searchWithDelayTime(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      {isLoad ? (\n        <>\n          <input\n            type=\"search\"\n            placeholder=\"Search\"\n            onChange={searchPosts}\n            value={searchValue}\n          />\n\n          <PostList\n            posts={posts}\n            searchResultValue={searchValue}\n          />\n        </>\n      ) : (\n        <button\n          type=\"button\"\n          onClick={loadData}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Load...' : 'Load'}\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","export const delayTime = (f, delay) => {\n  let timer;\n\n  return (...args) => {\n    clearTimeout(timer);\n\n    timer = setTimeout(f, delay, ...args);\n  };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}